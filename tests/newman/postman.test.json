{
	"info": {
		"_postman_id": "61350abf-07b9-4a44-8797-bf537f20b88f",
		"name": "@ TSH @ test (generated)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1550023"
	},
	"item": [
		{
			"name": "GET (html) home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type @ text/html\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000"
				}
			},
			"response": []
		},
		{
			"name": "GET (json) movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type @ application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Title is a non-empty string\", function () {",
							"  const responseData = pm.response.json();  ",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"pm.test(\"Year is a positive integer\", function () {",
							"  const responseData = pm.response.json();  ",
							"  pm.expect(responseData.year).to.be.a('number').and.to.be.above(0, \"Year should be a positive integer\");",
							"});",
							"pm.test(\"Runtime is a positive integer\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.runtime).to.be.a('number').and.to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET (json) movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type @ application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Title is a non-empty string\", function () {",
							"  const responseData = pm.response.json();    ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(movie) {",
							"    pm.expect(movie.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"  });",
							"});",
							"pm.test(\"Year is a positive integer\", function () {",
							"  const responseData = pm.response.json();  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  responseData.forEach(function(movie) {",
							"    pm.expect(movie.year).to.be.a('number').and.to.be.above(0, \"Year should be a positive integer\");",
							"  });",
							"});",
							"pm.test(\"Runtime is a positive integer\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(movie) {",
							"    pm.expect(movie.runtime).to.be.a('number').and.to.be.above(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/movies/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movies",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET (json) movies?d=100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type @ application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Verify that the response is an array\", function () {",
							"  const responseData = pm.response.json();  ",
							"  pm.expect(responseData).to.be.an('array');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/movies/json/?d=100",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movies",
						"json",
						""
					],
					"query": [
						{
							"key": "d",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET (json) movies?g=Sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type @ application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Title is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(movie){",
							"    pm.expect(movie.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"  });",
							"});",
							"pm.test(\"Year is a positive integer\", function () {",
							"  const responseData = pm.response.json(); ",
							"  responseData.forEach(function(movie) {",
							"    pm.expect(movie.year).to.be.a('number').and.to.be.greaterThan(0);",
							"  });",
							"});",
							"pm.test(\"Runtime should be a positive integer\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(movie) {",
							"    pm.expect(movie.runtime).to.be.a('number');",
							"    pm.expect(movie.runtime).to.be.above(0, \"Runtime should be a positive integer\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/movies/json/?g=Sport",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movies",
						"json",
						""
					],
					"query": [
						{
							"key": "g",
							"value": "Sport"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET (json) movies?d=100&g=Sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type @ application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Genres is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();    ",
							"  pm.expect(responseData).to.be.an('array');",
							"  pm.expect(responseData[0].genres).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
							"});",
							"pm.test(\"Title is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(movie) {",
							"    pm.expect(movie.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});",
							"pm.test(\"Year is a positive integer\", function () {",
							"  const responseData = pm.response.json(); ",
							"  responseData.forEach(function (movie) {",
							"    pm.expect(movie.year).to.be.a('number').and.to.be.above(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/movies/json/?d=100&g=Sport",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movies",
						"json",
						""
					],
					"query": [
						{
							"key": "d",
							"value": "100"
						},
						{
							"key": "g",
							"value": "Sport"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.validate).to.exist;",
							"});",
							"pm.test(\"Validate field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.validate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (500) ERROR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 500\", function () {",
							"  pm.response.to.have.status(500);",
							"});",
							"pm.test(\"Content-Type @ text/plain\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "x",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (x?)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code @ 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type header \\(contains\\) application/json\", function () {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
							"});",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();    ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.validate).to.exist;",
							"});",
							"pm.test(\"Validate is a non-empty string\", function () {",
							"  const responseData = pm.response.json(); ",
							"  pm.expect(responseData.validate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"genres\": [\"x\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (g)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"The response body is in JSON format\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Verify that the Content-Type header is set to application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response has the required field - validate\", function () {",
							"  const responseData = pm.response.json();    ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.validate).to.exist.and.to.be.a('string');",
							"});",
							"pm.test(\"Validate field is a non-empty string\", function () {",
							"  const responseData = pm.response.json(); ",
							"  pm.expect(responseData.validate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"genres\": [\"Sport\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (gt)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.validate).to.exist;",
							"});",
							"pm.test(\"Validate field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.validate).to.exist.and.to.not.be.empty;",
							"});",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"genres\": [\"Sport\"],\n    \"title\": \"TiT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (gty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();    ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.validate).to.exist.and.to.be.a('string');",
							"});",
							"pm.test(\"Validate field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.validate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"genres\": [\"Sport\"],\n    \"title\": \"TiT\",\n    \"year\": 1999\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (gtyr)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.validate).to.exist.and.to.be.a('string');",
							"});",
							"pm.test(\"Validate field is a non-empty string\", function () {",
							"  const responseData = pm.response.json(); ",
							"  pm.expect(responseData.validate).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"genres\": [\"Sport\"],\n    \"title\": \"TiT\",\n    \"year\": 1999,\n    \"runtime\": 99\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST (json) movie (gtyrd)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Genres is an array that is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.genres).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Genres should not be empty\");",
							"});",
							"pm.test(\"Year is a positive integer\", function () {",
							"  const responseData = pm.response.json(); ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.year).to.be.a('number').and.to.be.above(0, \"Year should be a positive integer\");",
							"});",
							"pm.test(\"Runtime is a positive integer\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.runtime).to.be.a('number').and.to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"genres\": [\"Sport\"],\n    \"title\": \"TiT\",\n    \"year\": 1999,\n    \"runtime\": 99,\n    \"director\": \"DiR\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/movie/json",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"movie",
						"json"
					]
				}
			},
			"response": []
		}
	]
}